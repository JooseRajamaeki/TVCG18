/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_RenderingClientDll(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_RenderingClientDll(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_RenderingClientDll(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* this code will be inserted to the generated RenderingClientDll_wrap.cpp */
#include "RenderClient.h"
#include "RenderCommands.h"

#include <ode/ode.h>



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_RenderClientData_physicsTimeStep_set(void * jarg1, float jarg2) {
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  float arg2 ;
  
  arg1 = (RenderClientData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->physicsTimeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderClientData_physicsTimeStep_get(void * jarg1) {
  float jresult ;
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  float result;
  
  arg1 = (RenderClientData *)jarg1; 
  result = (float) ((arg1)->physicsTimeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderClientData_defaultMouseControlsEnabled_set(void * jarg1, unsigned int jarg2) {
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  bool arg2 ;
  
  arg1 = (RenderClientData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->defaultMouseControlsEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenderClientData_defaultMouseControlsEnabled_get(void * jarg1) {
  unsigned int jresult ;
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  bool result;
  
  arg1 = (RenderClientData *)jarg1; 
  result = (bool) ((arg1)->defaultMouseControlsEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderClientData_maxAllowedTimeStep_set(void * jarg1, float jarg2) {
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  float arg2 ;
  
  arg1 = (RenderClientData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxAllowedTimeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderClientData_maxAllowedTimeStep_get(void * jarg1) {
  float jresult ;
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  float result;
  
  arg1 = (RenderClientData *)jarg1; 
  result = (float) ((arg1)->maxAllowedTimeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RenderClientData() {
  void * jresult ;
  RenderClientData *result = 0 ;
  
  result = (RenderClientData *)new RenderClientData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderClientData(void * jarg1) {
  RenderClientData *arg1 = (RenderClientData *) 0 ;
  
  arg1 = (RenderClientData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcInit() {
  rcInit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcUninit() {
  rcUninit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcUpdate() {
  rcUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcOnKeyDown(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  rcOnKeyDown(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcOnKeyUp(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  rcOnKeyUp(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcGetClientData(void * jarg1) {
  RenderClientData *arg1 = 0 ;
  
  arg1 = (RenderClientData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderClientData & type is null", 0);
    return ;
  } 
  rcGetClientData(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcOnMouse(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  rcOnMouse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCVector3_x_set(void * jarg1, float jarg2) {
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (RCVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCVector3_x_get(void * jarg1) {
  float jresult ;
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  float result;
  
  arg1 = (RCVector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCVector3_y_set(void * jarg1, float jarg2) {
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (RCVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCVector3_y_get(void * jarg1) {
  float jresult ;
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  float result;
  
  arg1 = (RCVector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCVector3_z_set(void * jarg1, float jarg2) {
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (RCVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCVector3_z_get(void * jarg1) {
  float jresult ;
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  float result;
  
  arg1 = (RCVector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCVector3__SWIG_0(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  RCVector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (RCVector3 *)new RCVector3((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCVector3__SWIG_1() {
  void * jresult ;
  RCVector3 *result = 0 ;
  
  result = (RCVector3 *)new RCVector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCVector3__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  RCVector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (RCVector3 *)new RCVector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCVector3(void * jarg1) {
  RCVector3 *arg1 = (RCVector3 *) 0 ;
  
  arg1 = (RCVector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCQuaternion_w_set(void * jarg1, float jarg2) {
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (RCQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCQuaternion_w_get(void * jarg1) {
  float jresult ;
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float result;
  
  arg1 = (RCQuaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCQuaternion_x_set(void * jarg1, float jarg2) {
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (RCQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCQuaternion_x_get(void * jarg1) {
  float jresult ;
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float result;
  
  arg1 = (RCQuaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCQuaternion_y_set(void * jarg1, float jarg2) {
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (RCQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCQuaternion_y_get(void * jarg1) {
  float jresult ;
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float result;
  
  arg1 = (RCQuaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCQuaternion_z_set(void * jarg1, float jarg2) {
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (RCQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RCQuaternion_z_get(void * jarg1) {
  float jresult ;
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  float result;
  
  arg1 = (RCQuaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCQuaternion__SWIG_0(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  RCQuaternion *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (RCQuaternion *)new RCQuaternion((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCQuaternion__SWIG_1() {
  void * jresult ;
  RCQuaternion *result = 0 ;
  
  result = (RCQuaternion *)new RCQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCQuaternion(void * jarg1) {
  RCQuaternion *arg1 = (RCQuaternion *) 0 ;
  
  arg1 = (RCQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeomRenderSettings_material_set(void * jarg1, int jarg2) {
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  RenderMaterials arg2 ;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  arg2 = (RenderMaterials)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeomRenderSettings_material_get(void * jarg1) {
  int jresult ;
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  RenderMaterials result;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  result = (RenderMaterials) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeomRenderSettings_a_set(void * jarg1, float jarg2) {
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float arg2 ;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeomRenderSettings_a_get(void * jarg1) {
  float jresult ;
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float result;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeomRenderSettings_r_set(void * jarg1, float jarg2) {
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float arg2 ;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeomRenderSettings_r_get(void * jarg1) {
  float jresult ;
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float result;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeomRenderSettings_g_set(void * jarg1, float jarg2) {
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float arg2 ;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeomRenderSettings_g_get(void * jarg1) {
  float jresult ;
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float result;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeomRenderSettings_b_set(void * jarg1, float jarg2) {
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float arg2 ;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeomRenderSettings_b_get(void * jarg1) {
  float jresult ;
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  float result;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeomRenderSettings() {
  void * jresult ;
  GeomRenderSettings *result = 0 ;
  
  result = (GeomRenderSettings *)new GeomRenderSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GeomRenderSettings(void * jarg1) {
  GeomRenderSettings *arg1 = (GeomRenderSettings *) 0 ;
  
  arg1 = (GeomRenderSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_type_set(void * jarg1, int jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RenderCommandTypes arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (RenderCommandTypes)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderCommand_type_get(void * jarg1) {
  int jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RenderCommandTypes result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (RenderCommandTypes) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_material_set(void * jarg1, int jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RenderMaterials arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (RenderMaterials)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderCommand_material_get(void * jarg1) {
  int jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RenderMaterials result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (RenderMaterials) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_a_set(void * jarg1, float jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderCommand_a_get(void * jarg1) {
  float jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_r_set(void * jarg1, float jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderCommand_r_get(void * jarg1) {
  float jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_g_set(void * jarg1, float jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderCommand_g_get(void * jarg1) {
  float jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_b_set(void * jarg1, float jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderCommand_b_get(void * jarg1) {
  float jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_radius_set(void * jarg1, float jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderCommand_radius_get(void * jarg1) {
  float jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_length_set(void * jarg1, float jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float arg2 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RenderCommand_length_get(void * jarg1) {
  float jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  float result;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (float) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_pos_set(void * jarg1, void * jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCVector3 *arg2 = (RCVector3 *) 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (RCVector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderCommand_pos_get(void * jarg1) {
  void * jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCVector3 *result = 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (RCVector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_pos2_set(void * jarg1, void * jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCVector3 *arg2 = (RCVector3 *) 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (RCVector3 *)jarg2; 
  if (arg1) (arg1)->pos2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderCommand_pos2_get(void * jarg1) {
  void * jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCVector3 *result = 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (RCVector3 *)& ((arg1)->pos2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_sides_set(void * jarg1, void * jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCVector3 *arg2 = (RCVector3 *) 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (RCVector3 *)jarg2; 
  if (arg1) (arg1)->sides = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderCommand_sides_get(void * jarg1) {
  void * jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCVector3 *result = 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (RCVector3 *)& ((arg1)->sides);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderCommand_q_set(void * jarg1, void * jarg2) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCQuaternion *arg2 = (RCQuaternion *) 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  arg2 = (RCQuaternion *)jarg2; 
  if (arg1) (arg1)->q = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderCommand_q_get(void * jarg1) {
  void * jresult ;
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  RCQuaternion *result = 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  result = (RCQuaternion *)& ((arg1)->q);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RenderCommand() {
  void * jresult ;
  RenderCommand *result = 0 ;
  
  result = (RenderCommand *)new RenderCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderCommand(void * jarg1) {
  RenderCommand *arg1 = (RenderCommand *) 0 ;
  
  arg1 = (RenderCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_rcGetNumCommands() {
  int jresult ;
  int result;
  
  result = (int)rcGetNumCommands();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcGetCommand(int jarg1, void * jarg2) {
  int arg1 ;
  RenderCommand *arg2 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (RenderCommand *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderCommand & type is null", 0);
    return ;
  } 
  rcGetCommand(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_rcClear() {
  rcClear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_rcGetPrintedString(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)rcGetPrintedString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_rcGetNumPrintedStrings() {
  int jresult ;
  int result;
  
  result = (int)rcGetNumPrintedStrings();
  jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

